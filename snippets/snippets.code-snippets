{
    // 1 - Environment
    "Get Global Environment": {
        "prefix": "getgenv",
        "body": [
            "getgenv()"
        ],
        "description": "Returns the global exploit environment."
    },
    "Get Roblox Environment": {
        "prefix": "getrenv",
        "body": [
            "getrenv()"
        ],
        "description": "Returns the global Roblox environment."
    },
    "Get Script Environment": {
        "prefix": "getsenv",
        "body": [
            "getsenv(${1:Script})"
        ],
        "description": "description"
    },
    "Get Lua Registry": {
        "prefix": ["getreg", "getregistry", "debug.getregistry"],
        "body": [
            "getreg()"
        ],
        "description": "Returns the Lua Registry"
    },
    "Get Garbage Collection": {
        "prefix": "getgc",
        "body": [
            "getgc(${1:IncludeTables?})"
        ],
        "description": "Returns all functions and userdata values within the Garbage Collection. Passing true will also return tables."
    },
    "Get Instances": {
        "prefix": "getinstances",
        "body": [
            "getinstances()"
        ],
        "description": "Returns a table of all instances within the game. This includes nil instances."
    },
    "Get Nil Instances": {
        "prefix": "getnilinstances",
        "body": [
            "getnilinstances()"
        ],
        "description": "Returns a table of all instances within the game that are parented to nil."
    },
    "Get Instance Cache": {
        "prefix": "getinstancecache",
        "body": [
            "getinstancecache()"
        ],
        "description": "Returns a table of all instances within the cache."
    },
    "Get Scripts": {
        "prefix": "getscripts",
        "body": [
            "getscripts()"
        ],
        "description": "Returns a table of all LocalScripts and ModuleScripts within the game."
    },
    "Get Loaded Modules": {
        "prefix": "getloadedmodules",
        "body": [
            "getloadedmodules()"
        ],
        "description": "Returns a table of all ModuleScripts that are loaded in the game."
    },
    "Get Connections": {
        "prefix": "getconnections",
        "body": [
            "getconnections(${1:Signal})"
        ],
        "description": "Returns a table of all connections to the specified Signal."
    },
    "Fire Signal": {
        "prefix": "firesignal",
        "body": [
            "firesignal(${1:Signal}, ${2:Args...})"
        ],
        "description": "Fires all connections connected to Signal with Args."
    },
    "Fire Click Detector": {
        "prefix": "fireclickdetector",
        "body": [
            "fireclickdetector(${1:ClickDetector}, ${2:Distance?}, ${3:Flag?})"
        ],
        "description": "Fires the specified ClickDetector with provided Distance and Flag."
    },
    "Fire Touch Interest": {
        "prefix": "firetouchinterest",
        "body": [
            "firetouchinterest(${1:Part}, ${2:OtherPart}, ${3:Touching})"
        ],
        "description": "Fires a Touched event on OtherPart with Part."
    },
    "Fire Proximity Prompt": {
        "prefix": "fireproximityprompt",
        "body": [
            "fireproximityprompt()"
        ],
        "description": "Fires a Triggered event on Prompt."
    },
    "Get Hidden Property": {
        "prefix": "gethiddenproperty",
        "body": [
            "gethiddenproperty(${1:Object}, ${2:Property})"
        ],
        "description": "Returns Object's hidden Property."
    },
    "Set Hidden Property": {
        "prefix": "sethiddenproperty",
        "body": [
            "sethiddenproperty(${1:Object}, ${2:Property}, ${3:Value})"
        ],
        "description": "Sets Object's hidden Property to Value."
    },
    "Get Properties": {
        "prefix": "getproperties",
        "body": [
            "getproperties(${1:Object})"
        ],
        "description": "Returns all properties of Object."
    },
    "Set Simulation Radius": {
        "prefix": "setsimulationradius",
        "body": [
            "setsimulationradius(${1:Radius}, ${2:MaxRadius?})"
        ],
        "description": "Sets the local player's SimulationRadius to Radius with optional MaxRadius."
    },
    "Get Script Bytecode": {
        "prefix": "getscriptbytecode",
        "body": [
            "getscriptbytecode(${1:Script})"
        ],
        "description": "Returns Script's bytecode."
    },
    "Get Script Hash": {
        "prefix": "getscripthash",
        "body": [
            "getscripthash(${1:Script})"
        ],
        "description": "Returns Script's hashed bytecode. (SHA_384)"
    },
    "Get Thread Context": {
        "prefix": "getthreadcontext",
        "body": [
            "getthreadcontext()"
        ],
        "description": "Returns the current thread context."
    },
    "Set Thread Context": {
        "prefix": "setthreadcontext",
        "body": [
            "setthreadcontext(${1:Context})"
        ],
        "description": "Sets the current thread's context to Context."
    },
    "Loadstring": {
        "prefix": "loadstring",
        "body": [
            "loadstring(${1:Chunk}, ${2:ChunkName?})"
        ],
        "description": "Loads Chunk as a Lua function with optional ChunkName and returns it."
    },
    "Set Scriptable": {
        "prefix": "setscriptable",
        "body": [
            "setscriptable(${1:Object}, ${2:Property}, ${3:Scriptable})"
        ],
        "description": "Sets Object's Property to be scriptable or not."
    },
    "Get Callback Value": {
        "prefix": ["getcallbackvalue", "getcallbackmember"],
        "body": [
            "getcallbackvalue(${1:Object}, ${2:Signal})"
        ],
        "description": "Allows you to get the function back from callbacks. This value is traditionally write-only."
    },
    "Get Module Unlocked": {
        "prefix": "getmoduleunlocked",
        "body": [
            "getmoduleunlocked(${1:Module})"
        ],
        "description": "Returns true if Module is unlocked."
    },
    "Set Module Unlocked": {
        "prefix": "setmoduleunlocked",
        "body": [
            "setmoduleunlocked(${1:Module}, ${2:Unlocked})"
        ],
        "description": "Sets Module's unlocked state to Unlocked."
    },

    // 2 - Metatable
    "Get Raw Metatable": {
        "prefix": ["getrawmetatable", "debug.getmetatable"],
        "body": [
            "getrawmetatable(${1:Table})"
        ],
        "description": "Returns Table's raw metatable, bypassing the __metatable field."
    },
    "Set Raw Metatable": {
        "prefix": ["setrawmetatable", "debug.setmetatable"],
        "body": [
            "setrawmetatable(${1:Table}, ${2:New})"
        ],
        "description": "Sets Table's metatable to New."
    },
    "Set Read Only": {
        "prefix": "setreadonly",
        "body": [
            "setreadonly(${1:Table}, ${2:Value})"
        ],
        "description": "Sets Table's read-only condition to Value."
    },
    "Is Read Only": {
        "prefix": "isreadonly",
        "body": [
            "isreadonly(${1:Table})"
        ],
        "description": "Returns Table's read-only condition."
    },
    "Hook Metamethod": {
        "prefix": "hookmetamethod",
        "body": [
            "hookmetamethod(${1:Object}, ${2:Metamethod}, ${3:Function})"
        ],
        "description": "description"
    },

    // 3 - Input
    "Is Roblox Active": {
        "prefix": "isrbxactive",
        "body": [
            "isrbxactive()"
        ],
        "description": "Returns true if the main window is in focus."
    },
    "Key Press": {
        "prefix": "keypress",
        "body": [
            "keypress(${1:Keycode})"
        ],
        "description": "Simulates a key press for the specified Keycode."
    },
    "Key Release": {
        "prefix": "keyrelease",
        "body": [
            "keyrelease(${1:Keycode})"
        ],
        "description": "Simulates a key release for the specified Keycode."
    },
    "Left Mouse Click": {
        "prefix": "mouse1click",
        "body": [
            "mouse1click()"
        ],
        "description": "Simulates a left mouse button click."
    },
    "Left Mouse Press": {
        "prefix": ["mouse1press", "mouse1down"],
        "body": [
            "mouse1press()"
        ],
        "description": "Simulates a left mouse button press."
    },
    "Left Mouse Release": {
        "prefix": ["mouse1release", "mouse1down"],
        "body": [
            "mouse1release()"
        ],
        "description": "Simulates a left mouse button release."
    },
    "Right Mouse Click": {
        "prefix": "mouse2click",
        "body": [
            "mouse2click()"
        ],
        "description": "Simulates a right mouse button click."
    },
    "Right Mouse Press": {
        "prefix": ["mouse2press", "mouse2down"],
        "body": [
            "mouse2press()"
        ],
        "description": "Simulates a right mouse button press."
    },
    "Right Mouse Release": {
        "prefix": ["mouse2release", "mouse2down"],
        "body": [
            "mouse2release()"
        ],
        "description": "Simulates a right mouse button release."
    },
    "Mouse Scroll": {
        "prefix": "mousescroll",
        "body": [
            "mousescroll(${1:Pixels})"
        ],
        "description": "Scrolls the mouse wheel virtuallu by Pixels."
    },
    "Mouse Move Relative": {
        "prefix": "mousemoverel",
        "body": [
            "mousemoverel(${1:X}, ${2:Y})"
        ],
        "description": "Moves the mouse cursor relative to the current mouse position to coordinates X and Y."
    },
    "Mouse Move Absolute": {
        "prefix": "mousemoveabs",
        "body": [
            "mousemoveabs(${1:X}, ${2:Y})"
        ],
        "description": "Moves the mouse cursor to the X and Y coordinates in pixels from the top left of the main window."
    },

    // 4 - Closure
    "Check Caller": {
        "prefix": "checkcaller",
        "body": [
            "checkcaller()"
        ],
        "description": "Returns true if the current thread was created by Krnl."
    },
    "Get Script Closure": {
        "prefix": "getscriptclosure",
        "body": [
            "getscriptclosure(${1:Script})"
        ],
        "description": "Returns a new copy of Script's closure."
    },
    "New C Closure": {
        "prefix": "newcclosure",
        "body": [
            "newcclosure(${1:Function})"
        ],
        "description": "Pushes a new C closure that invokes the function f upon call."
    },
    "Hook Function": {
        "prefix": ["hookfunction", "hookfunc"],
        "body": [
            "hookfunction(${1:Old}, ${2:New})"
        ],
        "description": "Hooks function Old, replacing it with the function New. The old function is returned, you must use this function is order to call the original function."
    },
    "Is C Closure": {
        "prefix": "iscclosure",
        "body": [
            "iscclosure(${1:Function})"
        ],
        "description": "Returns true if Function is a C closure."
    },
    "Is Lua Closure": {
        "prefix": "islclosure",
        "body": [
            "islclosure(${1:Function})"
        ],
        "description": "Returns true if Function is a Lua closure."
    },
    "Is Krnl Closure": {
        "prefix": ["iskrnlclosure", "checkclosure"],
        "body": [
            "iskrnlclosure(${1:Function})"
        ],
        "description": "Returns true if Function is a Krnl closure."
    },
    "Get Calling Script": {
        "prefix": "getcallingscript",
        "body": [
            "getcallingscript()"
        ],
        "description": "Returns the script that is calling the current function."
    },

    // 5 - Instance Saving
    "Save Instance": {
        "prefix": "saveinstance",
        "body": [
            "saveinstance(${1:Object?})"
        ],
        "description": "Saves the current game into your workspace folder. If an object is specified, it will save that object and its descendants as a model."
    },
    "Decompile": {
        "prefix": "decompile",
        "body": [
            "decompile(${1:Script})"
        ],
        "description": "Decompiles Script and returns the output."
    },

    // 6 - Console
    "Console Print": {
        "prefix": "rconsoleprint",
        "body": [
            "rconsoleprint(${1:Message})"
        ],
        "description": "Prints Text into the console."
    },
    "Console Info": {
        "prefix": "rconsoleinfo",
        "body": [
            "rconsoleinfo(${1:Message})"
        ],
        "description": "Prints Text into the console, with [INFO] written before it."
    },
    "Console Warn": {
        "prefix": "rconsolewarn",
        "body": [
            "rconsolewarn(${1:Message})"
        ],
        "description": "Prints Text into the console, with [WARNING] written before it."
    },
    "Console Error": {
        "prefix": "rconsoleerr",
        "body": [
            "rconsoleerr(${1:Message})"
        ],
        "description": "Prints Text into the console, with [ERROR] written before it."
    },
    "Console Clear": {
        "prefix": "rconsoleclear",
        "body": [
            "rconsoleclear()"
        ],
        "description": "Clears all text from the console."
    },
    "Console Name": {
        "prefix": "rconsolename",
        "body": [
            "rconsolename(${1:Title})"
        ],
        "description": "Sets the console's title to Title."
    },
    "Console Input": {
        "prefix": "rconsoleinput",
        "body": [
            "rconsoleinput()"
        ],
        "description": "Yields until the user inputs information and presses Enter. Returns the input they put in."
    },
    "Close Console": {
        "prefix": "rconsoleclose",
        "body": [
            "rconsoleclose()"
        ],
        "description": "Closes the console."
    },

    // 7 - Filesystem
    "Write File": {
        "prefix": "writefile",
        "body": [
            "writefile(${1:Path}, ${2:Content})"
        ],
        "description": "Writes Content to the supplied Path."
    },
    "Read File": {
        "prefix": "readfile",
        "body": [
            "readfile(${1:Path})"
        ],
        "description": "Returns the contents of the file located at Path."
    },
    "Append File": {
        "prefix": "appendfile",
        "body": [
            "appendfile(${1:Path}, ${2:Content})"
        ],
        "description": "Appends Content to the file contents at Path."
    },
    "Load File": {
        "prefix": "loadfile",
        "body": [
            "loadfile(${1:Path})()"
        ],
        "description": "Loads the contents of the file located at Path as a chunk and returns it."
    },
    "Do File": {
        "prefix": "dofile",
        "body": [
            "dofile(${1:Path})"
        ],
        "description": "Loads the contents of the file located at Path as a chunk and returns it."
    },
    "List Files": {
        "prefix": "listfiles",
        "body": [
            "listfiles(${1:Folder})"
        ],
        "description": "Returns a table of all files in Folder."
    },
    "Is File": {
        "prefix": "isfile",
        "body": [
            "isfile(${1:Path})"
        ],
        "description": "Returns true if Path is a file or not."
    },
    "Is Folder": {
        "prefix": "isfolder",
        "body": [
            "isfolder(${1:Path})"
        ],
        "description": "Returns true if Path is a folder or not."
    },
    "Make Folder": {
        "prefix": "makefolder",
        "body": [
            "makefolder(${1:Path})"
        ],
        "description": "Creates a new folder at Path."
    },
    "Zip Inflate": {
        "prefix": "zip_inflate",
        "body": [
            "zip_inflate()"
        ],
        "description": "Returns a table of all files in the specified zip folder."
    },
    "Delete File": {
        "prefix": "delfile",
        "body": [
            "delfile(${1:Path})"
        ],
        "description": "Deletes the file located at Path."
    },
    "Delete Folder": {
        "prefix": "delfolder",
        "body": [
            "delfolder(${1:Path})"
        ],
        "description": "Deletes the folder located at Path."
    },

    // 8 - Miscellaneous
    "Set Clipboard": {
        "prefix": "setclipboard",
        "body": [
            "setclipboard(${1:Content})"
        ],
        "description": "Sets Content to the clipboard."
    },
    "Set Fast Flag": {
        "prefix": "setfflag",
        "body": [
            "setffag(${1:Flag}, ${2:Value})"
        ],
        "description": "Sets Flag's value to Value."
    },
    "Get Custom Asset": {
        "prefix": "getcustomasset",
        "body": [
            "getcustomasset(${1:Path})"
        ],
        "description": "Returns a string that can be used as a fake Asset ID for Gui elements."
    },
    "Get Special Info": {
        "prefix": "getspecialinfo",
        "body": [
            "getspecialinfo(${1:Object})"
        ],
        "description": "Returns a table of special properties for MeshParts, UnionOperations, and Terrain instances."
    },
    "Message Box": {
        "prefix": "messagebox",
        "body": [
            "messagebox(${1:Text}, ${2:Title}, ${3:Flag})"
        ],
        "description": "Creates a message box."
    },
    "Get Objects": {
        "prefix": "game:GetObjects",
        "body": [
            "game:GetObjects(${1:AssetId})"
        ],
        "description": "Returns a table of all objects for the specified AssetId."
    },
    "Queue On Teleport": {
        "prefix": "queue_on_teleport",
        "body": [
            "queue_on_teleport(${1:Code})"
        ],
        "description": "Executes Code after the local player is teleported."
    },
    "Request": {
        "prefix": "request",
        "body": [
            "request(${1:Options})"
        ],
        "description": "Creates an HTTP request with Options."
    },
    "Set Parent Internal": {
        "prefix": "setparentinternal",
        "body": [
            "setparentinternal(${1:Object}, ${2:Parent})"
        ],
        "description": "Internally sets the parent of Object to Parent without firing any signals."
    },
    "Add Child Internal": {
        "prefix": "addchildinternal",
        "body": [
            "addchildinternal(${1:Parent}, ${2:Object})"
        ],
        "description": "Internally adds Object to Parent without firing any signals."
    },
    "Identify Executor": {
        "prefix": "identifyexecutor",
        "body": [
            "identifyexecutor()"
        ],
        "description": "Returns Krnl."
    },
    "Krnl Loaded": {
        "prefix": "KRNL_LOADED",
        "body": [
            "KRNL_LOADED"
        ],
        "description": "A variable that determines if the current executor is Krnl."
    },
    "Get Hidden UI": {
        "prefix": ["gethui", "hiddenUI"],
        "body": [
            "gethui()"
        ],
        "description": "Returns a holder made for GUI's to be parented to."
    },
    "Is Luau": {
        "prefix": "isluau",
        "body": [
            "isluau()"
        ],
        "description": "Returns true if the current game is using Luau."
    },
    "Set FPS Cap": {
        "prefix": "setfpscap",
        "body": [
            "setfpscap(${1:Cap})"
        ],
        "description": "Sets the fps cap to Cap."
    },
    "Run Secure": {
        "prefix": "run_secure",
        "body": [
            "run_secure(${1:Encrypted})"
        ],
        "description": "Loads Encrypted as a chunk."
    },
    "Get Network Mode": {
        "prefix": "getnetworkmode",
        "body": [
            "getnetworkmode()"
        ],
        "description": "Returns the current network mode."
    },
    "Set Network Mode": {
        "prefix": "setnetworkmode",
        "body": [
            "setnetworkmode(${1:Mode})"
        ],
        "description": "Sets the current network mode to Mode."
    },
    "Luau Compile": {
        "prefix": "luau_compile",
        "body": [
            "luau_compile(${1:String})"
        ],
        "description": "Returns a Luau compiled version of String."
    },
    "Luau Load": {
        "prefix": "luau_load",
        "body": [
            "luau_load()"
        ],
        "description": "Loads a Luau compiled string as a chunk."
    },

    // 9 - Other
    "Krnl Safe Call": {
        "prefix": "KRNL_SAFE_CALL",
        "body": [
            "KRNL_SAFE_CALL(${1:Function}, ${2:Args...})"
        ],
        "description": "Calls function Function with Args in a LocalScript environment."
    },
    "Handle Teleport": {
        "prefix": "HANDLE_TELEPORT",
        "body": [
            "HANDLE_TELEPORT()"
        ],
        "description": "Handles a teleport."
    },
    "Unlock Module": {
        "prefix": "unlockModule",
        "body": [
            "unlockModule(${1:Module})"
        ],
        "description": "Unlocks Module."
    },
    "Lock Module": {
        "prefix": "lockModule",
        "body": [
            "lockModule()"
        ],
        "description": "Locks Module."
    },
    "Run Auto Execute Scripts": {
        "prefix": "run_auto_execute_scripts",
        "body": [
            "run_auto_execute_scripts()"
        ],
        "description": "Executes all scripts in your autoexec directory."
    },
    "Run Queue On Teleport Scripts": {
        "prefix": "run_teleport_queue_scripts",
        "body": [
            "run_teleport_queue_scripts()"
        ],
        "description": "Executes all scripts that have been created with queue_on_teleport. This will remove all scripts that have been created with queue_on_teleport."
    },
    "Assign Socket": {
        "prefix": "assign_socket",
        "body": [
            "assign_socket(${1:Socket}, ${2:Url})"
        ],
        "description": "Assigns Socket's connection to Url."
    },
    "Send Socket": {
        "prefix": "send_socket",
        "body": [
            "send_socket(${1:Socket}, ${2:Message})"
        ],
        "description": "Sends a message through Socket's connection."
    },
    "Close Socket": {
        "prefix": "close_socket",
        "body": [
            "close_socket(${1:Socket})"
        ],
        "description": "Closes Socket's connection."
    },

    // 10 - Bit Library
    "And": {
        "prefix": ["band", "bit.band"],
        "body": [
            "bit.band(${1:x}, ${2:disp})"
        ],
        "description": "Returns the bitwise and of its operands."
    },
    "Or": {
        "prefix": ["bor", "bit.bor"],
        "body": [
            "bit.bor(${1:x}, ${2:disp})"
        ],
        "description": "Returns the bitwise or of its operands."
    },
    "Exclusive Or": {
        "prefix": ["bxor", "bit.bxor"],
        "body": [
            "bit.bxor(${1:x}, ${2:disp})"
        ],
        "description": "Returns the bitwise exclusive or of its operands."
    },
    "Not": {
        "prefix": ["bnot", "bit.bnot"],
        "body": [
            "bit.bnot(${1:x})"
        ],
        "description": "Returns the bitwise negation of x."
    },
    "Left Shift": {
        "prefix": ["lshift", "bit.lshift"],
        "body": [
            "bit.lshift(${1:x}, ${2:disp})"
        ],
        "description": "Returns the number x shifted disp bits to the left."
    },
    "Right Shift": {
        "prefix": ["rshift", "bit.rshift"],
        "body": [
            "bit.rshift(${1:x}, ${2:disp})"
        ],
        "description": "Returns the number x shifted disp bits to the right."
    },
    "Arithmetic Shift": {
        "prefix": ["arshift", "bit.arshift"],
        "body": [
            "bit.arshift(${1:x}, ${2:disp})"
        ],
        "description": "Returns the number x shifted disp bits to the right. The number disp may be any representable integer. Negative displacements shift to the left."
    },
    "Left Rotate": {
        "prefix": ["lrotate", "bit.lrotate"],
        "body": [
            "bit.lrotate(${1:x}, ${2:disp})"
        ],
        "description": "Returns the number x rotated disp bits to the left."
    },
    "Right Rotate": {
        "prefix": ["rrotate", "bit.rrotate"],
        "body": [
            "bit.rrotate(${1:x}, ${2:disp})"
        ],
        "description": "Returns the number x rotated disp bits to the right."
    },
    "Extract": {
        "prefix": ["extract", "bit.extract"],
        "body": [
            "bit.extract(${1:x}, ${2:field}, ${3:width})"
        ],
        "description": "Returns the unsigned number formed by the bits field to field + width - 1 from x."
    },
    "Replace": {
        "prefix": ["replace", "bit.replace"],
        "body": [
            "bit.replace(${1:x}, ${2:field}, ${3:width})"
        ],
        "description": "Returns a copy of x with the bits field to field + width - 1 replaced by the value v."
    },
    "Test": {
        "prefix": ["btest", "bit.btest"],
        "body": [
            "bit.btest(${1:x})"
        ],
        "description": "Returns a boolean signalling whether the bitwise and of its operands is different from zero."
    },
    "Count Left": {
        "prefix": ["countlz", "bit.countlz"],
        "body": [
            "bit.countlz(${1:x})"
        ],
        "description": "Returns the number of consecutive zero bits in the 32-bit representation of x starting from left-most (most significant) bit. Returns 32 if x is zero."
    },
    "Count Right": {
        "prefix": ["countrz", "bit.countrz"],
        "body": [
            "bit.countrz(${1:x})"
        ],
        "description": "Returns the number of consecutive zero bits in the 32-bit representation of x starting from the right-most (least significatn) bit. Returns 32 if x is zero."
    },

    // 11 - Crypt Library
    "Hash": {
        "prefix": ["sha384_hash", "Krnl.crypt.hash"],
        "body": [
            "Krnl.crypt.hash(${1:Data})"
        ],
        "description": "Hashes Data with SHA-384."
    },
    "Base64 Encode": {
        "prefix": ["base64_encode", "Krnl.Base64.Encode"],
        "body": [
            "Krnl.Base64.Encode(${1:Data})"
        ],
        "description": "Encodes Data with Base64."
    },
    "Base64 Decode": {
        "prefix": ["base64_decode", "Krnl.Base64.Decode"],
        "body": [
            "Krnl.Base64.Decode(${1:Data})"
        ],
        "description": "Decodes Data with Base64."
    },

    // 12 - Debug Library
    "Get Constant": {
        "prefix": ["getconstant", "debug.getconstant"],
        "body": [
            "debug.getconstant(${1:f}, ${2:idx})"
        ],
        "description": "Returns the constant at index idx in function f or level f."
    },
    "Get Constants": {
        "prefix": ["getconstants", "debug.getconstants"],
        "body": [
            "debug.getconstants(${1:f})"
        ],
        "description": "Returns the constants in function f or at level f."
    },
    "Set Constant": {
        "prefix": ["setconstant", "debug.setconstant"],
        "body": [
            "debug.setconstant(${1:f}, ${2:idx}, ${3:value})"
        ],
        "description": "Sets constant idx to tuple value at level or function f."
    },
    "Get Upvalue": {
        "prefix": ["getupvalue", "debug.getupvalue"],
        "body": [
            "debug.getupvalue(${1:f}, ${2:idx})"
        ],
        "description": "Returns the upvalue with name idx in function or level f."
    },
    "Get Upvalues": {
        "prefix": ["getupvalues", "debug.getupvalues"],
        "body": [
            "debug.getupvalues(${1:f})"
        ],
        "description": "Retrieves the upvalues in function f or at level f."
    },
    "Set Upvalue": {
        "prefix": ["setupvalue", "debug.setupvalue"],
        "body": [
            "debug.setupvalue(${1:f}, ${2:idx}, ${3:value})"
        ],
        "description": "Sets upvalue idx to value at level or function f."
    },
    "Get Proto": {
        "prefix": ["getproto", "debug.getproto"],
        "body": [
            "debug.getproto(${1:f}, ${2:idx}, ${3:activated?})"
        ],
        "description": "Gets the inner function of f at index."
    },
    "Get Protos": {
        "prefix": ["getprotos", "debug.getprotos"],
        "body": [
            "debug.getprotos(${1:f})"
        ],
        "description": "Returns a table containing the inner function f."
    },
    "Get Stack": {
        "prefix": ["getstack", "debug.getstack"],
        "body": [
            "debug.getstack(${1:f}, ${2:idx})"
        ],
        "description": "Gets the method stack at level or function f."
    },
    "Set Stack": {
        "prefix": ["setstack", "debug.setstack"],
        "body": [
            "debug.setstack(${1:f}, ${2:idx}, ${3:value})"
        ],
        "description": "Sets the stack indice at idx to value at level or function f."
    },
    "Get Info": {
        "prefix": ["getinfo", "debug.getinfo"],
        "body": [
            "debug.getinfo(${1:f})"
        ],
        "description": "Returns a table of information about function f."
    },
    "Info": {
        "prefix": ["info", "debug.info"],
        "body": [
            "debug.example(${1:f}, ${2:idx})"
        ],
        "description": "Allows programmatic inspection of the call stack."
    },
    "Traceback": {
        "prefix": ["traceback", "debug.traceback"],
        "body": [
            "debug.traceback(${1:message}, ${2:level})"
        ],
        "description": "Returns a traceback of the current function call stack as a string."
    },
    "Profile Begin": {
        "prefix": ["profilebegin", "debug.profilebegin"],
        "body": [
            "debug.profilebegin(${1:Label})"
        ],
        "description": "Opens a microprofiler label."
    },
    "Profile End": {
        "prefix": ["profileend", "debug.profileend"],
        "body": [
            "debug.profileend()"
        ],
        "description": "Closes the top microprofiler label."
    },

    // 13 - Drawing Library
    "New Drawing": {
        "prefix": "Drawing.new",
        "body": [
            "Drawing.new(${1:Class})"
        ],
        "description": "Returns a new Drawing object with Class."
    },
    "Clear Drawings": {
        "prefix": ["Drawing.clear, Drawing.Clear"],
        "body": [
            "Drawing.clear()"
        ],
        "description": "Removes all Drawing objects."
    },
    "Fonts": {
        "prefix": "Drawing.Fonts",
        "body": [
            "Drawing.Fonts"
        ],
        "description": "A table of all Drawing Fonts."
    },

    // 14 - Krnl Library
    "Require": {
        "prefix": ["Require", "Krnl:Require"],
        "body": [
            "Krnl:Require(${1:Module})"
        ],
        "description": "Returns a module."
    },
    "Load Async": {
        "prefix": ["LoadAsync", "Krnl:LoadAsync"],
        "body": [
            "Krnl:LoadAsync(${1:Url})"
        ],
        "description": "Loads the contents of Url as a chunk. Equivalent to loadstring(game:HttpGet(Url)()"
    },
    "SaveInstance": {
        "prefix": ["SaveInstance", "Krnl.SaveInstance"],
        "body": [
            "Krnl.SaveInstance"
        ],
        "description": "A table of settings and function related to Save Instance."
    },

    // 15 - Websocket Library
    "Connect Websocket": {
        "prefix": ["WebSocket.connect", "Krnl.WebSocket.connect"],
        "body": [
            "WebSocket.connect(${1:Url})"
        ],
        "description": "Attempts to connect to Url."
    },
}
